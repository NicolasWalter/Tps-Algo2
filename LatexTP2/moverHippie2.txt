function imoverHippie (inout e:estr, h:nombre){
	var posicion actual <-- obtener (e.posCiviles, h)
	var posicion d <-- FUNCION A HACER DONDE TE DEVUELVE LA PROXIMA POSICION
	var posicion prx <-- proxPosicion(e.campus, d, obtener(e.posCiviles,h))
	var itConj(nombre) copia <-- e.quienOcupa[actual.X][actual.Y].hayHippieoEstudiante
		QuienOcupa [actual.X][actual.Y] <-- <false, nadie, nuevoIt(), nuevoIt()>
		QuienOcupa [prx.X][prx.Y] <-- <true, hippie, nuevoIt(), copia>
		borrar (e.posCiviles, h)
		definir(e.posCiviles, h, prx)
	var conj(posicion) Ps <-- vecinos(e.campus, prx)
	var itConj(posicion) it <-- crearIt(Ps)

	while (haySiguiente(it)) do
		if ocupada(e.campus, siguiente(it)) v !e.quienOcupa[siguiente(it).X][siguiente(it).Y].ocupada?
			then avanzar(it)
			else if esEstudiante(&e,siguiente(it) && esHippizable(e,siguiente(it))
					then Hippizar(&e, siguiente(it))
						 if (esCapturable(&e, siguiente(it)) then  capturarHippie(&e, siguiente(it)) endIf
					else if esEstudiante(&e, siguiente(it)) && esCapturable(e, siguiente(it))
							then var itConj(posicion) itAg <-- vecinos(e.campus, siguiente(it))
							    while (haySiguiente(itAg)) do
									if esAgente(&e, sig(itAg)) then sancionar(&e, sig(itAg)) endIf
									avanzar(itAg)
							else if esHippie(&e, siguiente(it)) && esCapturable(e, siguiente(it))
								 then capturarHippie(&e,siguiente(it))
							
		avanzar(it)
	endWhile
                                        	

											
function esEstudiante (in e:estr, in p:posicion) --> res:bool
	
	res <-- e.quienOcupa[p.X][p.Y].quienOcupa == estudiante
	
	
function esHippie (in e:estr, in p:posicion) --> res:bool
	
	res <-- e.quienOcupa[p.X][p.Y].quienOcupa == hippie
	
function esAgente (in e:estr, in p:posicion) --> res:bool
	
	res <-- e.quienOcupa[p.X][p.Y].quienOcupa == agente	
	
function Estudiantizar(inout e:Estr, p:posicion)
	var nombre n <-- SiguienteoActual(e.quienOcupa[p.X][p.Y].hayHippieoEstudiante)
	
	eliminar(e.hippies, n)
	var itConj(nombre) it <-- agregarRapido(e.estudiantes,n)
	e.quienOcupa[p.X][p.Y].hayHippieoEstudiante<-- <true, estudiante, crearIt(), it>
	
function Hippizar(inout e:Estr, p:posicion)
	var nombre n <-- SiguienteoActual(e.quienOcupa[p.X][p.Y].hayHippieoEstudiante)
	
	eliminar(e.estudiantes, n)
	var itConj(nombre) it <-- agregarRapido(e.hippies,n)
	e.quienOcupa[p.X][p.Y].hayHippieoEstudiante<-- <true, hippie, crearIt(), it>	
	
function esCapturable (in e:estr, in p:posicion) --> res:bool
	var itConj(posicion) it <-- crear(vecinos(e.campus,p))
	var nat Contador <-- 0
	var bool hayGuardia <-- false
	
	while (haySiguiente(it)) do
		if e.quienOcupa[p.X][p.Y].ocupada?
			then contador++
		if e.quienOcupa[siguiente(it).X][siguiente(it).Y].quienOcupa == agente
			then hayGuardia <-- true
		avanzar(it)
	
	endWhile
	
	res<--contador==4 && hayGuardia
	
	
function esHippizable (in e:estr, in p:posicion) --> res:bool
	var itConj(posicion) it <-- crear(vecinos(e.campus,p))
	var nat Contador <-- 0
	
	
	while (haySiguiente(it)) do
		 if e.quienOcupa[siguiente(it).X][siguiente(it).Y].quienOcupa == hippie
		  then contador++
		avanzar(it)
	
	endWhile
	
	res <-- contador >= 2
	
function capturarHippie (inout e:estr, in p:posicion)
	eliminarSiguiente(e.quienOcupa[p.X][p.Y].hayHippieoEstudiante) //ES ASI?
	e.quienOcupa[p.X][p.Y] <-- <false, nadie, crearIt(), crearIt()>
	var conj(posicion) v <-- vecinos(e.campus, p)
	
	while haySiguiente(it) do
		if e.quienOcupa[siguiente(it).X][siguiente(it).Y].quienOcupa == agente
			then recompensar(e,siguiente(it)) //HAY QUE HACER RECOMPENSAR
		avanzar(it)
	endWhile
	
function todasOcupadas (in e:estr, in p:conj(posicion))--> res:bool
	var itConj(posicion) it <-- crear(p)
	var nat contador <-- 0
	while haySiguiente(it)
		if  e.quienOcupa[siguiente(it).X][siguiente(it).Y].ocupada?
			then contador++
		avanzar (it)
	endWhile

	res <-- contador == 4
	

//Falta poder contar cuantos hippies y estudiantes hay (y si es estudiante o hippie)
//Falta sancionar

function iRecompensar(inout e:estr, in a:posicion){
	var placa p <-obtener(e.quienOcupa,a).hayCana
	var datosAgente dat <- obtener(e.agentes,p)
	var datosAgente nuevosDat<-(dat.#sanciones, dat.premios +1, dat.posActual, dat.grupoSanciones, dat.verK)
	definir(e.agentes,p,nuevosDat)
	if(dat.premios+1 > obtener(e.agentes,e.masVigilante).premios) then
		e.masVigilante=p else
		if(dat.premios+1 == obtener(e.agentes,e.masVigilante).premios)) then
			if(p<e.masVigilante) then
				e.masVigilante=p 
			endIf
		endIf
	endIf
}

function iIngresarEstudiante (in n:Nombre, in p:Posicion, inout e:estr){
	if(esHippizable(e,p)) then 
		if(esCapturable(e,p)) then
			var conj(posicion) v <-- vecinos(e.campus, p)
			var itConj(posicion) it <-- crearIt(v)
			while haySiguiente(it) do
				if e.quienOcupa[siguiente(it).X][siguiente(it).Y].queHay == "agente" then 
					recompensar(e,siguiente(it)) //HAY QUE HACER RECOMPENSAR
				avanzar(it)
			endWhile
		else 
			definir(e.posCiviles,n,p)
			var itDicc(nombre,posicion) iterPos <-- definirRapido(e.posRapida,n,p)
			e.quienOcupa[p.X][p.Y] <-- <true,"hippie",crearIt(),agregar(e.hippies(<n,iterPos>))>
			var conj(posicion) Ps <-- vecinos(e.campus, p)
			var itConj(posicion) it <-- crearIt(Ps)
			while (haySiguiente(it)) do
				if esEstudiante(e,siguiente(it)) && esHippizable(e,siguiente(it))	then
					Hippizar(e, siguiente(it))
					if (esCapturable(e, siguiente(it)) then  
					 	capturarHippie(e, siguiente(it)) endIf
				else 
					if esEstudiante(e, siguiente(it)) && esCapturable(e, siguiente(it))	then 
						var itConj(posicion) itAg <-- vecinos(e.campus, siguiente(it))
						    while (haySiguiente(itAg)) do
								if esAgente(e, sig(itAg)) then sancionar(e, sig(itAg)) endIf
								avanzar(itAg)
					else 
						if esHippie(e, siguiente(it)) && esCapturable(e, siguiente(it))
							then capturarHippie(&e,siguiente(it))
						endIf
				endIf
				avanzar(it)
			endWhile
	else
		definir(e.posCiviles,n,p)
		var itDicc(nombre,posicion) iterPos <-- definirRapido(e.posRapida,n,p)
		e.quienOcupa[p.X][p.Y] <-- <true,"estudiante",crearIt(),agregar(e.estudiantes(<n,iterPos>))>
		var conj(posicion) Ps <-- vecinos(e.campus,p)
		var itConj(posicion) it <-- crearIt(Ps)
		while (haySiguiente(it)) do
			if(esHippie(e,siguiente(it)) && esEstudiantizable(e,siguiente(it))) then
				Estudiantizar(e,siguiente(it))
				if(esCapturable(e,siguiente(it))) then
					var itConj(posicion) itAg <-- vecinos(e.campus, siguiente(it))
				    while (haySiguiente(itAg)) do
				 		if esAgente(&e, sig(itAg)) then sancionar(&e, sig(itAg)) endIf
						avanzar(itAg)
				endIf
			else
				if esEstudiante(e, siguiente(it)) && esCapturable(e, siguiente(it))	then 
						var itConj(posicion) itAg <-- vecinos(e.campus, siguiente(it))
						    while (haySiguiente(itAg)) do
								if esAgente(e, sig(itAg)) then sancionar(e, sig(itAg)) endIf
								avanzar(itAg)
					else 
						if esHippie(e, siguiente(it)) && esCapturable(e, siguiente(it))
							then capturarHippie(&e,siguiente(it))
						endIf




//fruta??
//complejidad??
function iRecompensar(inout e:estr, in a:posicion){
	var placa p <-siguiente(quienOcupa[a.X][a.Y].hayCana)
	var datosAgente dat <- obtener(e.agentes,p)
	var datosAgente nuevosDat<-(dat.#sanciones, dat.premios +1, dat.posActual, dat.grupoSanciones, dat.verK)
	definir(e.agentes,p,nuevosDat)
	if(dat.premios+1 > obtener(e.agentes,siguiente(e.masVigilante)).premios) then
		e.masVigilante<-p else
		if(dat.premios+1 == obtener(e.agentes,siguiente(e.masVigilante)).premios)) then
			if(p<siguiente(e.masVigilante)) then
				e.masVigilante<-p 
			endIf
		endIf
	endIf
}


function iSancionar(inout e:estr, in a:posicion){

	
}














//////////              ALGORITMOS               LATEX                /////////////////

\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$Campus}}{\paramIn{e}{estr}}{$\disFlecha$ res : campus} \Comment{$\Ode{1}$}
  \State res $\gets$ e.campo
  
\EndFunction
\end{algorithmic}
\end{algorithm}


\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$Estudiantes}}{\paramIn{e}{estr}}{$\disFlecha$ res : itConj(nombre)} \Comment{$\Ode{1}$}
	\State var itConj(nombre) it $\gets$ crearIt (e.estudiantes)
  	\State res $\gets$ it
  
\EndFunction
\end{algorithmic}
\end{algorithm}


\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$Hippies}}{\paramIn{e}{estr}}{$\disFlecha$ res : itConj(nombre)} \Comment{$\Ode{1}$}
	\State var itConj(nombre) it $\gets$ crearIt (e.hippies)
  	\State res $\gets$ it
  
\EndFunction
\end{algorithmic}
\end{algorithm}

\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$Agentes}}{\paramIn{e}{estr}}{$\disFlecha$ res : itConj(agente)} \Comment{$\Ode{1}$}
	\State var itDicc(placa,datosAgente) it $\gets$ crearIt (e.agentes)
  	\State res $\gets$ it
  
\EndFunction
\end{algorithmic}
\end{algorithm}

\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$posEstudiantesYHippie}}{\paramIn{n}{nombre} \paramIn{e}{estr}}{$\disFlecha$ res : posicion} \Comment{$\Ode{\longitud{n_{m}}}$}
  	\State res $\gets$ obtener(n,e.posCiviles)
  
\EndFunction
\end{algorithmic}
\end{algorithm}

\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$posAgente}}{\paramIn{a}{agente} \paramIn{e}{estr}}{$\disFlecha$ res : posicion} \Comment{$\Ode{1}(promedio)$}
  	\State res $\gets$ obtener(a,e.agentes).posActual
  
\EndFunction
\end{algorithmic}
\end{algorithm}

\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$cantSanciones}}{\paramIn{a}{agente} \paramIn{e}{estr}}{$\disFlecha$ res : nat} \Comment{$\Ode{1}(promedio)$}
  	\State res $\gets$ obtener(a,e.agentes).Qsanciones
  
\EndFunction
\end{algorithmic}
\end{algorithm}

\begin{algorithm}\phantom{[H]}
\begin{algorithmic}[1]
\Function {\textsc{$i$cantHippiesAtrapados}}{\paramIn{a}{agente} \paramIn{e}{estr}}{$\disFlecha$ res : nat} \Comment{$\Ode{1}(promedio)$}
  	\State res $\gets$ obtener(a,e.agentes).premios
  
\EndFunction
\end{algorithmic}
\end{algorithm}

